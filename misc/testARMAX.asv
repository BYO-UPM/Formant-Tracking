function [] = testARMAX()

% Play around with the SysID toolbox to see about pole zero estimation
close all; clear all;

% Synthesize ARMA model

N = 1000; % Number of data points
p = 2; % Number of poles 
q = 2; % Number of zeros


rz = .9; thetaz = 2*pi/3; % Complex-conjugate zero pair: (+/- 2pi/3, .9)
rp = .99; thetap = pi/3;  % Complex-conjugate pole pair: (+/- pi/3, .99)

% Create an ARMA model by filtering a white noise sequence
x = filter([1 -2*cos(thetaz)*rz rz^2], [1 -2*cos(thetap)*rp rp^2], randn(N,1));

disp(sprintf('True AR Coefficients: %d %d %d', 1, -2*cos(thetap)*rp, rp^2));
disp(sprintf('True MA Coefficients: %d %d %d', 1, -2*cos(thetaz)*rz, rz^2));

figure;
subplot(2,1,1);
plot(x);
title('Time-domain waveform');
xlabel('Samples'); ylabel('Amplitude');
subplot(2,1,2);

lfft = 1024;
X = 20*log10(abs(fft(x,lfft)));
X = X(1:1:lfft/2);
bins = linspace(0,pi,length(X));
plot(bins, X);
title('Log-Power Spectrum');
xlabel('Frequency (Rad)'); ylabel('Magnitude (dB)');
axis('tight');

% Estimate AR params using arcov (this leads to a biased estimate)
[arCoeffs1 e] = arcov(x,p);

% Estimate ARMA parameters using ar
% Package for sysID toolbox

data = iddata(x,[],1);
na = p;
nc = q;
m = armax(data,[na nc]);
arCoeffs2 = m.a;
maCoeffs  = m.c;

dd = 3;